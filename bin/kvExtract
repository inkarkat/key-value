#!/bin/bash

: ${KVEXTRACT_INPUTFILES_END=;}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-F|--field-separator INPUT-SEPARATOR] [-s|--output-separator OUTPUT-SEPARATOR] [--duplicate-key first|last|error|abort] [--] KEY1 [KEY2 ...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" "... -i|--input FILE [-i ...]|--input-files FILE [...] ${KVEXTRACT_INPUTFILES_END} [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Extract the VALUE(s) of the passed KEY(s) from KEY INPUT-SEPARATOR VALUE lines
and print all VALUE(s) in the order of KEY(s) given.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --duplicate-key first	Ignore subsequent keys in the input that have
				already been seen.
    --duplicate-key last	Duplicate keys in the input override any
				previously seen records.
    --duplicate-key error	Duplicate keys in the input cause an error and
				are not extracted at all. (This is the default.)
    --duplicate-key abort	Duplicate keys in the input cause the entire
				extract to abort.
    --input|-i FILE	Read from FILE(s) instead of standard input.
    --input-files FILE [...] ${KVEXTRACT_INPUTFILES_END}
			Read from the following FILE(s) i.e. all following
			arguments until an argument consisting of '${KVEXTRACT_INPUTFILES_END}'
			is encountered instead of standard input.
HELPTEXT
}

typeset -a fsArgs=()
typeset -a inputFilespecs=()
outputSeparator=$'\n'
onDuplicateKey=error
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--input|-i)	shift; inputFilespecs+=("${1:?}"); shift;;
	--input-files)	shift
			while [ $# -gt 0 -a "$1" != "$KVEXTRACT_INPUTFILES_END" ]
			do
			    inputFilespecs+=("$1")
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --input-files must be concluded with '${KVEXTRACT_INPUTFILES_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			if [ ${#inputFilespecs[@]} -eq 0 ]; then
			    echo 'ERROR: --input-files must be followed by at least one FILE.'; echo; printUsage "$0"
			    exit 2
			fi >&2
			;;
	--field-separator|-F)
			shift; fsArgs=(-F "$1"); shift;;
	--output-separator|-s)
			shift; outputSeparator="${1?}"; shift;;
	--duplicate-key)
			shift
			onDuplicateKey="${1?}"; shift
			case "$onDuplicateKey" in
			    first|last|error|abort)  ;;
			    *)  { printf 'ERROR: Invalid value for --duplicate-key: %s\n' "$onDuplicateKey"; echo; printShortUsage "$0"; } >&2; exit 2;;
			esac
			;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

IFS=$'\n'
exec awk "${fsArgs[@]}" \
    -v "keyListString=${*//\\/\\\\}" \
    -v "outputSeparator=${outputSeparator//\\/\\\\}" \
    -v "onDuplicateKey=$onDuplicateKey" \
'
function getFollowingFields()
{
    $1 = ""; sub(OFS, ""); return $0
}
function printDuplicateKeys()
{
    if (values[key] == "") {
	printf("ERROR: Duplicate key \x27%s\x27; duplicate value: \x27%s\x27\n", key, getFollowingFields()) > "/dev/stderr"
    } else {
	printf("ERROR: Duplicate key \x27%s\x27; values: \x27%s\x27 and \x27%s\x27\n", key, values[key], getFollowingFields()) > "/dev/stderr"
    }
}
BEGIN {
    keyNum = split(keyListString, keyList, "\n")
    for (k in keyList) keys[keyList[k]] = 1
    status = 0
}
($1 in keys) {
    key = $1
    if (key in values) {
	if (onDuplicateKey == "first") {
	    next
	} else if (onDuplicateKey == "last") {
	    # Update the value.
	} else if (onDuplicateKey == "error") {
	    printDuplicateKeys()
	    status = 1
	    values[key] = ""
	    next
	} else if (onDuplicateKey == "abort") {
	    printDuplicateKeys()
	    status = 1
	    keyNum = 0	# Skip printing values at the END.
	} else {
	    printf("ASSERT: Invalid onDuplicateKey: %s\n", onDuplicateKey) > "/dev/stderr"
	    exit 3
	}
    }
    values[key] = getFollowingFields()
}
END {
    for (i = 1; i <= keyNum; i++) {
	printf("%s%s", values[keyList[i]], i == keyNum ? "\n" : outputSeparator)
    }
    exit status
}
' "${inputFilespecs[@]}"
