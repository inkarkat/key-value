#!/bin/bash

: ${KVTOFIELDS_LEGEND_PREFIX=# }

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, they can
    # skim the long one.
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-F|--field-separator FS] [-s|--output-separator OUTPUT-SEPARATOR] [-u|--unbuffered] [-E|--syntax-error abort|warn|ignore] [--header-legend] [--footer-legend] [--schema "KEY1 KEY2 ..." [--schema-deviation warn|accept|skip|abort]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Convert "KEY=VALUE" pairs on lines to columns (per KEY).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --field-separator|-F FS
			Use FS as the input field separator (as with AWK).
    --unbuffered|-u	Immediately output each read line.
    --syntax-error|-E abort
			When input that doesn't match KEY=VALUE is encountered,
			abort the entire processing of the input. This is the
			default behavior.
    --syntax-error|-E warn
			When input that doesn't match KEY=VALUE is encountered,
			print a warning to stderr and continue processing.
    --syntax-error|-E ignore
			When input that doesn't match KEY=VALUE is encountered,
			simply ignore it and continue processing.
    --header-legend	Print the names of the (first line's) KEYs (prefixed
			with ${KVTOFIELDS_LEGEND_PREFIX}) before the first line.
    --footer-legend	Print the names of all encountered KEYs (prefixed with
			${KVTOFIELDS_LEGEND_PREFIX}) after all output.
    --schema "KEY1 KEY2 ..."
			Define the order of the expected KEYs. Output will be
			done in that order.
    --schema-deviation warn
			Accept new KEY(s) that are not part of the passed
			schema, but print a warning. This is the default
			behavior.
    --schema-deviation accept
			Silently accept new KEY(s) that are not part of the
			passed schema.
    --schema-deviation skip
			Ignore KEY(s) encountered in the input that are not part
			of the passed schema.
    --schema-deviation abort
			When a KEY is encountered that is not part of the passed
			schema, abort the entire processing of the input.
EXIT STATUS:
    0	Complete success.
    1	Aborted due to input error.
    2	Bad invocation, wrong or missing command-line arguments.

Example:
HELPTEXT
    printf 'ping -c 4 localhost | %q %s\n' "$(basename "$1")" '--footer-legend -E ignore'
}

isBuffered=t
typeset -a awkArgs=()
outputSeparator=
onSyntaxError=abort
isHeaderLegend=
isFooterLegend=
schema=
onSchemaDeviation=warn
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--field-separator|-F)
			shift; awkArgs=(-F "$1"); shift;;
	--output-separator|-s)
			shift; outputSeparator="${1?}"; shift;;
	--unbuffered|-u)
			shift; isBuffered=;;
	--syntax-error|-E)
			shift
			case "${1:?}" in
			    abort|warn|ignore) onSyntaxError="$1";;
			    *)  { printf 'ERROR: Invalid value for --syntax-error: %s\n' "$1"; echo; printShortUsage "$0"; } >&2; exit 2;;
			esac
			shift
			;;
	--header-legend)
			shift; isHeaderLegend=t;;
	--footer-legend)
			shift; isFooterLegend=t;;
	--schema)	shift; schema="${1:?}"; shift;;
	--schema-deviation)
			shift
			case "${1:?}" in
			    warn|accept|skip|abort) onSchemaDeviation="$1";;
			    *)  { printf 'ERROR: Invalid value for --schema-deviation: %s\n' "$1"; echo; printShortUsage "$0"; } >&2; exit 2;;
			esac
			shift
			;;
	--)		break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

IFS=$'\n'
exec awk "${awkArgs[@]}" \
    -v "outputSeparator=${outputSeparator//\/\\}" \
    -v "isBuffered=$isBuffered" \
    -v "onSyntaxError=$onSyntaxError" \
    -v "legendPrefix=${KVTOFIELDS_LEGEND_PREFIX//\\/\\\\}" \
    -v "isHeaderLegend=$isHeaderLegend" \
    -v "isFooterLegend=$isFooterLegend" \
    -v "schemaList=${schema//\\/\\\\}" \
    -v "onSchemaDeviation=$onSchemaDeviation" \
'
function die(status)
{
    isDead = 1
    exit status
}
function printLegend(      result, key, sep)
{
    PROCINFO["sorted_in"] = "@val_num_asc"
    result = legendPrefix
    sep = ""
    for (key in keys) {
	result = result sep key
	sep = OFS
    }
    print result
    if (! isBuffered) fflush()
}
BEGIN {
    schemaNum = split(schemaList, schemas)
    for (i = 1; i <= schemaNum; ++i) {
	keys[schemas[i]] = i - 1
	keyCnt++
    }
}
NR == 1 {
    # Use passed OUTPUT-SEPARATOR, fall back to FS unless it is a regular expression.
    if (outputSeparator != "") {
	OFS = outputSeparator
    } else {
	firstTwoFields = $1 FS $2
	if (NF < 2 || substr($0, 1, length(firstTwoFields)) == firstTwoFields) {
	    OFS = FS
	} else if (FS == " ") {
	    OFS = ((substr($0, 1, length(firstTwoFields)) == $1 "\t" $2) ? "\t" : " ")
	} else {
	    print "Note: Using space as default output field separator; change via -s|--output-separator OUTPUT-SEPARATOR or pass a non-regular expression -F|--field-separator FIELD-SEPARATOR." > "/dev/stderr"
	}
    }
}
{
    delete values
    hasValues = 0
    for (i = 1; i <= NF; ++i) {
	if (match($i, /^([^=]+)=(.*)$/, a)) {
	    keyIdx = keys[a[1]]
	    if (keyIdx == "") {
		if (schemaNum > 0) {
		    if (onSchemaDeviation == "abort") {
			printf("ERROR: Unknown key: %s (%s:%d field %d)\n", a[1], FILENAME, FNR, i) > "/dev/stderr"
			die(1)
		    } else if (onSchemaDeviation == "warn") {
			printf("Warning: Unknown key: %s (%s:%d field %d)\n", a[1], FILENAME, FNR, i) > "/dev/stderr"
		    } else if (onSchemaDeviation == "skip") {
			delete keys[a[1]]
			continue
		    }
		}

		keyIdx = keyCnt++
		keys[a[1]] = keyIdx
	    }
	    values[keyIdx] = a[2]
	    hasValues = 1
	} else {
	    if (onSyntaxError == "abort") {
		printf("ERROR: Not a key-value pair: %s (%s:%d field %d)\n", $i, FILENAME, FNR, i) > "/dev/stderr"
		die(1)
	    } else if (onSyntaxError == "warn") {
		printf("Warning: Not a key-value pair: %s (%s:%d field %d)\n", $i, FILENAME, FNR, i) > "/dev/stderr"
	    }
	}
    }

    if (NR == 1 && isHeaderLegend) {
	printLegend()
    }

    if (hasValues) {
	result = ""
	for (i = 0; i < keyCnt; ++i) {
	    result = result (i ? OFS : "") values[i]
	}
	print result
	if (! isBuffered) fflush()
    }
}
END {
    if (isFooterLegend && ! isDead) {
	printLegend()
    }
}
' "$@"
